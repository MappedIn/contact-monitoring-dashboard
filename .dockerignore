# This file is provided as a default .dockerignore file that should be included
#   in every project that runs its service in a container.
# Each service can choose to include new lines, or omit existing ones.
# This is only meant as a starting point to ensure containers are clean, and
#   avoid rebuilding themselves whenever possible.
# Individual groups of ignored patterns are documented as to why they are
#   ignored.
# Files not present in this file are sent to the Docker daemon upon starting to
#   build your container.
# In cases where a Dockerfile contains a `COPY . .` all files in the build
#   directory will be copied onto the container.
# This is often not desirable.

# Important optional files
# These files are omitted from containers by default in this .dockerignore
#   file, but there are many cases where including these in our projects is
#   desirable.
# Examples of when these files should be included in containers are as follows:
#   If testing is performed in a Docker container.
#   If you need more than one environment config
**/*.test.js
**/__mocks__
**/__snapshots__
**/__mongo_mock__
**/dist
.env.*
test

# Operating system files
# Similar to a .gitignore files, any hidden files generated by your operating
#   system for thumbnails, or window management shouldn't be included in your
#   container.
# Without these, resizing a window in OS X can lead to a container being
#   rebuilt from a `COPY . .`
**/.DS_Store
**/Thumbs.db

# Docker files
# Your container doesn't need to know it's running as a container.
# Omit these files, as changes to a Dockerfile, or .dockerignore file shouldn't
#   lead to a rebuild of an entire application copied using `COPY . .`
.dockerignore
Dockerfile
docker-compose*.yml

# Git files
# Should be ignored unless your container actually relies on making
#   modifications to files using Git, or relies on Git directly.
# If you don't explicitly run Git commands in your container, these should
#   likely not be changed.
.git
.gitignore

# Editor files
# Including these files in your container will cause local dev environment file
#   changes to trigger rebuilds.
# These will also lead to having deploys run from different machines to have an
#   entirely disjoint set of layers following a `COPY . .`
.editorconfig
.idea
.vscode
*.sublime-project
*.sublime-workspace
**/.ackrc

# Node files
# These files are used by, or generated by Node that don't need to be copied
#   to all containers.
# Some of the files in here are included by tools that typically run in our
#   existing Node development processes.
**/.eslintignore
**/.eslintrc
**/.eslintrc.yml
**/.grunt
**/.nvmrc
**/.nyc_output
**/bower_components
**/coverage
**/node_modules
**/npm-debug.log
**/yarn-debug.log
**/.happypack

# Deployment files
# These files are related to our deployment processes, and shouldn't be
#   included in running containers.
Jenkinsfile*
terraform

# AWS files
# A container running in AWS doesn't require these files to be present.
# These files are often copied to the host, and interpreted by AWS when
#   managing the machine that runs containers, but shouldn't be included in the
#   containers themselves.
.elasticbeanstalk
Dockerrun.aws.json

# Files specific for this project
**/.happypack
**/README.md
